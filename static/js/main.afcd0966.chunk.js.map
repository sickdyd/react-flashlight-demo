{"version":3,"sources":["App.js","serviceWorker.js","index.js","bg.jpg"],"names":["style","display","justifyContent","alignItems","backgroundImage","bg","backgroundSize","height","width","margin","fontSize","borderRadius","boxShadow","App","React","useState","x","y","position","setPosition","id","setInterval","point","Math","random","window","innerWidth","innerHeight","clearInterval","className","moveTo","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gQAKMA,G,MAAQ,CACZC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,gBAAgB,OAAD,OAASC,IAAT,KACfC,eAAgB,UAChBC,OAAQ,OACRC,MAAO,OACPC,OAAQ,OACRC,SAAU,QACVC,aAAc,MACdC,UAAW,sCAiDEC,MA9Cf,WAAgB,IAAD,EAEmBC,IAAMC,SAAS,CAACC,EAAG,EAAGC,EAAG,IAF5C,mBAENC,EAFM,KAEIC,EAFJ,KAgBb,OAZAL,IAAMC,UAAS,WACb,IAAIK,EAMJ,OALAA,EAAKC,aAAY,WACf,IAAMC,EAAQ,CAACN,EAAGO,KAAKC,SAAWC,OAAOC,WAAYT,EAAGM,KAAKC,SAAWC,OAAOE,aAC/ER,EAAYG,KACX,KAEI,WACLM,cAAcR,MAEf,IAGD,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAEhB,iEACA,6BACA,+EACA,6BAEA,kBAAC,kBAAD,KACE,yBAAK7B,MAAOA,GAAZ,gCAKF,+EAEA,kBAAC,kBAAD,CAAiB8B,OAAQZ,GACvB,yBAAKlB,MAAOA,GAAZ,4CAKF,uBAAG+B,KAAK,0BAAR,6CC9CYC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.afcd0966.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ReactFlashlight } from \"react-flashlight\";\r\nimport bg from \"./bg.jpg\";\r\nimport './App.css';\r\n \r\nconst style = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  backgroundImage: `url(${bg})`,\r\n  backgroundSize: \"contain\",\r\n  height: \"30vh\",\r\n  width: \"90vw\",\r\n  margin: \"20px\",\r\n  fontSize: \"5vmin\",\r\n  borderRadius: \"4px\",\r\n  boxShadow: \"0 2px 5px -1px rgba(0, 0, 0, 0.3)\"\r\n} \r\n \r\nfunction App() {\r\n\r\n  const [position, setPosition] = React.useState({x: 0, y: 0});\r\n\r\n  React.useState(()=>{\r\n    let id;\r\n    id = setInterval(()=>{\r\n      const point = {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n      setPosition(point);\r\n    }, 2000);\r\n\r\n    return ()=>{\r\n      clearInterval(id);\r\n    }\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        <span>ReactFlashlight demo by Sickdyd</span>\r\n        <br />\r\n        <span>Use the mouse wheel to change the light size.</span>\r\n        <br />\r\n\r\n        <ReactFlashlight>\r\n          <div style={style}>\r\n            Hello, I'm a child element.\r\n          </div>\r\n        </ReactFlashlight>\r\n\r\n        <span>This is light is controlled programmatically.</span>\r\n\r\n        <ReactFlashlight moveTo={position}>\r\n          <div style={style}>\r\n            Hello, I'm controlled programmatically.\r\n          </div>\r\n        </ReactFlashlight>\r\n\r\n        <a href=\"http://www.freepik.com\">Background designed by brgfx / Freepik</a>\r\n\r\n      </header>\r\n    </div> \r\n  ); \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.c34fb122.jpg\";"],"sourceRoot":""}