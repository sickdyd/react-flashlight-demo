{"version":3,"sources":["App.js","serviceWorker.js","index.js","bg.jpg"],"names":["style","borderRadius","boxShadow","App","React","useState","x","y","position","setPosition","enabled","setEnabled","id","setInterval","point","Math","random","clearInterval","className","color","fontSize","showCursor","width","margin","onClick","height","src","bg","alt","enableMouse","moveTo","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gQAKMA,G,MAAQ,CACZC,aAAc,MACdC,UAAW,sCA8EEC,MA3Ef,WAAgB,IAAD,EAEmBC,IAAMC,SAAS,CAACC,EAAG,EAAGC,EAAG,IAF5C,mBAENC,EAFM,KAEIC,EAFJ,OAGiBL,IAAMC,UAAS,GAHhC,mBAGNK,EAHM,KAGGC,EAHH,KAiBb,OAZAP,IAAMC,UAAS,WACb,IAAIO,EAMJ,OALAA,EAAKC,aAAY,WACf,IAAMC,EAAQ,CAACR,EAAmB,IAAhBS,KAAKC,SAAgBT,EAAmB,IAAhBQ,KAAKC,UAC/CP,EAAYK,KACX,KAEI,WACLG,cAAcL,MAEf,IAGD,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAEhB,0BAAMlB,MAAO,CAACmB,MAAO,MAAOC,SAAU,uBAAtC,mCAEA,yBAAKF,UAAU,aACb,8CACA,yBAAKA,UAAU,QACb,kBAAC,kBAAD,CAAiBG,YAAU,GACzB,yBAAKH,UAAU,OAAf,QACA,yBAAKA,UAAU,OAAf,YACA,yBAAKA,UAAU,OAAf,YACA,yBAAKA,UAAU,OAAf,gBAKN,yBAAKA,UAAU,aACb,yCAAc,0BAAMlB,MAAO,CAACmB,MAAO,QAArB,SAAd,uBACA,iEACA,4BAAQnB,MAAO,CAACsB,MAAO,QAASC,OAAQ,QAASC,QAAS,kBAAIb,GAAYD,KAA1E,eACA,kBAAC,kBAAD,CAAiBA,QAASA,GACxB,yBAAKV,MAAOA,GACV,yBAAKA,MAAO,CAACsB,MAAO,OAAQG,OAAQ,QAASC,IAAKC,IAAIC,IAAI,UAKhE,yBAAKV,UAAU,aACb,+EACA,kBAAC,kBAAD,CACEW,aAAa,EACbR,YAAY,EACZS,OAAQtB,GAER,yBAAKR,MAAOA,GACV,yBAAKA,MAAO,CAACsB,MAAO,OAAQG,OAAQ,QAASC,IAAKC,IAAIC,IAAI,UAKhE,yBAAKV,UAAU,aACb,gGACA,kBAAC,kBAAD,CAAiBY,OAAQtB,GACvB,yBAAKR,MAAOA,GACV,yBAAKA,MAAO,CAACsB,MAAO,OAAQG,OAAQ,QAASC,IAAKC,IAAIC,IAAI,UAKhE,8BAAM,uBAAGG,KAAK,0BAAR,yCClEMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.6c457b55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ReactFlashlight } from \"react-flashlight\";\r\nimport bg from \"./bg.jpg\";\r\nimport './App.css';\r\n \r\nconst style = {\r\n  borderRadius: \"4px\",\r\n  boxShadow: \"0 2px 5px -1px rgba(0, 0, 0, 0.3)\",\r\n} \r\n \r\nfunction App() {\r\n\r\n  const [position, setPosition] = React.useState({x: 0, y: 0});\r\n  const [enabled, setEnabled] = React.useState(true);\r\n\r\n  React.useState(()=>{\r\n    let id;\r\n    id = setInterval(()=>{\r\n      const point = {x: Math.random() * 300, y: Math.random() * 230}\r\n      setPosition(point);\r\n    }, 2000);\r\n\r\n    return ()=>{\r\n      clearInterval(id);\r\n    }\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        <span style={{color: \"red\", fontSize: \"calc(2vmin + 20px)\"}}>ReactFlashlight demo by Sickdyd</span>\r\n\r\n        <div className=\"container\">\r\n          <span>Menu example</span>\r\n          <div className=\"menu\">\r\n            <ReactFlashlight showCursor>\r\n              <div className=\"btn\">Home</div>\r\n              <div className=\"btn\">Projects</div>\r\n              <div className=\"btn\">Contacts</div>\r\n              <div className=\"btn\">Something</div>\r\n            </ReactFlashlight>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <span>Use the <span style={{color: \"red\"}}>mouse</span> to move the light.</span>          \r\n          <span>You can turn on/off the lights.</span>\r\n          <button style={{width: \"150px\", margin: \"20px\"}} onClick={()=>setEnabled(!enabled)}>Turn on/off</button>\r\n          <ReactFlashlight enabled={enabled}>\r\n            <div style={style}>\r\n              <img style={{width: \"80vw\", height: \"auto\"}} src={bg} alt=\"bg\" />\r\n            </div>\r\n          </ReactFlashlight>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <span>This is light is controlled programmatically.</span>\r\n          <ReactFlashlight\r\n            enableMouse={false}\r\n            showCursor={true}\r\n            moveTo={position}\r\n            >\r\n            <div style={style}>\r\n              <img style={{width: \"80vw\", height: \"auto\"}} src={bg} alt=\"bg\" />\r\n            </div>\r\n          </ReactFlashlight>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <span>This is light is controlled programmatically and by the mouse.</span>\r\n          <ReactFlashlight moveTo={position}>\r\n            <div style={style}>\r\n              <img style={{width: \"80vw\", height: \"auto\"}} src={bg} alt=\"bg\" />\r\n            </div>\r\n          </ReactFlashlight>\r\n        </div>\r\n\r\n        <span><a href=\"http://www.freepik.com\">Image designed by brgfx / Freepik</a></span>\r\n\r\n      </header>\r\n    </div> \r\n  ); \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.c34fb122.jpg\";"],"sourceRoot":""}